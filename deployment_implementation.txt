# Docker Compose configuration for LangServe + SvelteKit Frontend
version: '3.8'

services:
  # LangServe Backend
  langserve-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./backend:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SvelteKit Frontend
  svelte-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PUBLIC_LANGSERVE_CHATBOT_URL=http://langserve-backend:8000/chatbot
      - PUBLIC_LANGSERVE_CODE_URL=http://langserve-backend:8000/code-assistant
      - PUBLIC_LANGSERVE_DATA_URL=http://langserve-backend:8000/data-analyst
      - PUBLIC_LANGSERVE_CREATIVE_URL=http://langserve-backend:8000/creative-writer
      - PUBLIC_LANGSERVE_RESEARCH_URL=http://langserve-backend:8000/research-assistant
      - PUBLIC_SOCKET_IO_URL=http://localhost:3000
    depends_on:
      - langserve-backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - svelte-frontend
      - langserve-backend
    restart: unless-stopped

---
# Backend Dockerfile
# backend/Dockerfile
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

---
# Frontend Dockerfile
# frontend/Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./
RUN npm install -g pnpm && pnpm install

# Copy application code
COPY . .

# Build the application
RUN pnpm build

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/langserve || exit 1

# Run the application
CMD ["node", "build"]

---
# Nginx Configuration
# nginx/nginx.conf
events {
    worker_connections 1024;
}

http {
    upstream frontend {
        server svelte-frontend:3000;
    }

    upstream langserve {
        server langserve-backend:8000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=ws:10m rate=50r/m;

    server {
        listen 80;
        server_name localhost;

        # SvelteKit Frontend
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket timeouts
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # WebSocket
        location /api/socket.io/ {
            proxy_pass http://frontend/api/socket.io/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket timeouts
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;

            # Rate limiting for WebSocket connections
            limit_req zone=ws burst=10 nodelay;
        }

        # LangServe Backend API
        location /langserve/ {
            proxy_pass http://langserve/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Rate limiting for API calls
            limit_req zone=api burst=20 nodelay;

            # Timeouts for streaming responses
            proxy_read_timeout 300;
            proxy_send_timeout 300;
        }

        # Health checks
        location /health {
            access_log off;
            proxy_pass http://frontend/api/langserve;
        }

        location /langserve/health {
            access_log off;
            proxy_pass http://langserve/health;
        }
    }
}

---
# Environment file template
# .env.example
# Copy to .env and fill in your values

# API Keys
OPENAI_API_KEY=your-openai-api-key-here
ANTHROPIC_API_KEY=your-anthropic-api-key-here
TAVILY_API_KEY=your-tavily-api-key-here

# Security
PUBLIC_SOCKET_IO_URL=http://localhost:3000

# Optional: Custom LangServe URLs if not using Docker Compose
# PUBLIC_LANGSERVE_CHATBOT_URL=http://localhost:8000/chatbot
# PUBLIC_LANGSERVE_CODE_URL=http://localhost:8000/code-assistant
# PUBLIC_LANGSERVE_DATA_URL=http://localhost:8000/data-analyst

---
# Requirements.txt for backend
# backend/requirements.txt
fastapi==0.104.1
langserve[all]==0.0.38
langchain==0.1.0
langchain-openai==0.0.2
langchain-anthropic==0.1.0
langchain-community==0.0.10
uvicorn[standard]==0.24.0
pydantic==2.5.0
python-multipart==0.0.6

---
# Deployment instructions
# DEPLOYMENT.md

## LangServe SvelteKit Frontend Deployment Guide

### Prerequisites
- Docker and Docker Compose
- API keys for OpenAI, Anthropic, and Tavily (optional)
- Domain name and SSL certificates (for production)

### Quick Start

1. **Clone and setup:**
   ```bash
   git clone <repository>
   cd claude-rocks-the-dashboard
   cp .env.example .env
   # Edit .env with your API keys
   ```

2. **Development:**
   ```bash
   # Start LangServe backend
   cd backend
   python -m uvicorn main:app --reload

   # In another terminal, start SvelteKit frontend
   cd frontend
   pnpm install
   pnpm dev
   ```

3. **Production:**
   ```bash
   docker-compose up -d
   ```

### Configuration

#### Environment Variables
- `OPENAI_API_KEY`: Required for OpenAI models
- `ANTHROPIC_API_KEY`: Required for Anthropic models
- `TAVILY_API_KEY`: Optional, for enhanced search capabilities

#### Frontend Configuration
- `PUBLIC_SOCKET_IO_URL`: URL for the Socket.IO server
- `PUBLIC_LANGSERVE_CHATBOT_URL`: URL for the chatbot endpoint
- `PUBLIC_LANGSERVE_CODE_URL`: URL for the code assistant endpoint
- `PUBLIC_LANGSERVE_DATA_URL`: URL for the data analyst endpoint

#### Scaling
For high-traffic deployments:

1. **Multiple frontend instances:**
   ```bash
   docker-compose up --scale svelte-frontend=3
   ```

2. **Multiple LangServe instances:**
   ```bash
   docker-compose up --scale langserve-backend=3
   ```

3. **Load balancing:**
   - Update nginx.conf with additional upstream servers
   - Consider using external load balancers

#### Monitoring
Add monitoring services:
- Prometheus + Grafana for metrics
- Health check endpoints at `/health` and `/langserve/health`

#### Security
- Configure CORS origins appropriately
- Use SSL certificates in production
- Implement rate limiting
- Regular security updates

### LangServe Endpoints
- `/chatbot`: General conversational AI
- `/code-assistant`: Coding specialist
- `/data-analyst`: Data analysis with tools
- `/creative-writer`: Creative writing assistant
- `/research-assistant`: Research with search

### Testing
```bash
# Test LangServe backend
curl http://localhost:8000/health

# Test SvelteKit frontend
curl http://localhost:3000/api/langserve

# Interactive testing
# Visit http://localhost:3000 for web interface
# Visit http://localhost:8000/docs for API documentation
```