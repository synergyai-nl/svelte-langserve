name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      root: ${{ steps.changes.outputs.root }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'examples/dashboard/**'
              - 'packages/**'
              - 'pnpm-lock.yaml'
              - 'pnpm-workspace.yaml'
            backend:
              - 'examples/langgraph-backend/**'
            root:
              - 'package.json'
              - 'nx.json'
              - 'eslint.config.js'
              - '.github/workflows/**'

  frontend:
    name: Frontend (SvelteKit)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.root == 'true'
    defaults:
      run:
        working-directory: examples/dashboard
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build dashboard (nx handles dependencies)
        run: pnpm nx run dashboard:build

  backend:
    name: Backend (Python/FastAPI)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.root == 'true'
    defaults:
      run:
        working-directory: examples/langgraph-backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup UV environment
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "examples/langgraph-backend/uv.lock"

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: uv sync --dev

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install monorepo dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint and format with ruff
        run: pnpm nx run langgraph-backend:format

  lint-frontend:
    name: Lint (Frontend)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
      - name: Lint frontend
        run: pnpm nx run dashboard:lint

  lint-backend:
    name: Lint (Backend)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup UV environment
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "examples/langgraph-backend/uv.lock"
      - name: Set up Python
        run: uv python install
      - name: Setup Node.js and pnpm  
        uses: ./.github/actions/setup-node-pnpm
      - name: Install backend dependencies
        working-directory: examples/langgraph-backend
        run: uv sync --dev
      - name: Lint backend
        run: pnpm nx run langgraph-backend:lint

  typecheck-frontend:
    name: Typecheck (Frontend)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
      - name: Typecheck frontend
        run: pnpm nx run dashboard:typecheck

  typecheck-backend:
    name: Typecheck (Backend)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup UV environment
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "examples/langgraph-backend/uv.lock"
      - name: Set up Python
        run: uv python install
      - name: Setup Node.js and pnpm  
        uses: ./.github/actions/setup-node-pnpm
      - name: Install backend dependencies
        working-directory: examples/langgraph-backend
        run: uv sync --dev
      - name: Typecheck backend
        run: pnpm nx run langgraph-backend:typecheck

  test-frontend:
    name: Test (Frontend)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
      - name: Test frontend
        run: pnpm nx run dashboard:test

  test-backend:
    name: Test (Backend)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup UV environment
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "examples/langgraph-backend/uv.lock"
      - name: Set up Python
        run: uv python install
      - name: Setup Node.js and pnpm  
        uses: ./.github/actions/setup-node-pnpm
      - name: Install backend dependencies
        working-directory: examples/langgraph-backend
        run: uv sync --dev
      - name: Test backend
        run: pnpm nx run langgraph-backend:test

  lint-package:
    name: Lint (Package)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
      - name: Lint package
        run: pnpm nx run svelte-langgraph:lint

  typecheck-package:
    name: Typecheck (Package)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
      - name: Typecheck package
        run: pnpm nx run svelte-langgraph:typecheck

  test-package:
    name: Test (Package)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
      - name: Test package
        run: pnpm nx run svelte-langgraph:test

  # Main consolidated quality check that GitHub branch protection will require
  quality:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [changes, lint-frontend, lint-backend, lint-package, typecheck-frontend, typecheck-backend, typecheck-package, test-frontend, test-backend, test-package]
    if: always() && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.root == 'true')
    steps:
      - name: Check all quality checks passed
        run: |
          # Check if any required job failed
          if [[ "${{ needs.lint-frontend.result }}" == "failure" || 
                "${{ needs.lint-backend.result }}" == "failure" || 
                "${{ needs.lint-package.result }}" == "failure" || 
                "${{ needs.typecheck-frontend.result }}" == "failure" || 
                "${{ needs.typecheck-backend.result }}" == "failure" || 
                "${{ needs.typecheck-package.result }}" == "failure" || 
                "${{ needs.test-frontend.result }}" == "failure" || 
                "${{ needs.test-backend.result }}" == "failure" || 
                "${{ needs.test-package.result }}" == "failure" ]]; then
            echo "❌ One or more quality checks failed"
            echo "Frontend Lint: ${{ needs.lint-frontend.result }}"
            echo "Backend Lint: ${{ needs.lint-backend.result }}"
            echo "Package Lint: ${{ needs.lint-package.result }}"
            echo "Frontend Typecheck: ${{ needs.typecheck-frontend.result }}"
            echo "Backend Typecheck: ${{ needs.typecheck-backend.result }}"
            echo "Package Typecheck: ${{ needs.typecheck-package.result }}"
            echo "Frontend Test: ${{ needs.test-frontend.result }}"
            echo "Backend Test: ${{ needs.test-backend.result }}"
            echo "Package Test: ${{ needs.test-package.result }}"
            exit 1
          fi
          echo "✅ All quality checks passed!"

  e2e:
    name: End-to-End Tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [changes, frontend, backend, quality]
    if: always() && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.root == 'true')
    defaults:
      run:
        working-directory: examples/dashboard
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build dashboard (nx handles dependencies)
        run: pnpm nx run dashboard:build

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Install uv (for backend)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "examples/langgraph-backend/uv.lock"

      - name: Set up Python
        run: uv python install

      - name: Install backend dependencies
        working-directory: examples/langgraph-backend
        run: uv sync

      - name: Start backend server
        working-directory: examples/langgraph-backend
        run: |
          uv run uvicorn src.svelte_langgraph.app:create_app --factory --host 0.0.0.0 --port 8000 &
          echo $! > backend.pid
        env:
          TEST_MODE: true
          OPENAI_API_KEY: test-key-for-mocking
          ANTHROPIC_API_KEY: test-key-for-mocking
          SECRET_KEY: test-secret-key-for-ci

      - name: Start frontend server
        working-directory: examples/dashboard
        run: |
          npm run dev &
          echo $! > frontend.pid
        env:
          PUBLIC_LANGGRAPH_SERVER_URL: http://localhost:8000

      - name: Wait for servers
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done' || echo "Backend health check failed, continuing with tests"
          timeout 30 bash -c 'until curl -f http://localhost:5173; do sleep 1; done' || echo "Frontend health check failed, continuing with tests"

      - name: Run Playwright tests
        run: pnpm test:e2e

      - name: Upload Playwright report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: examples/dashboard/playwright-report/
          retention-days: 30

      - name: Cleanup servers
        if: always()
        working-directory: examples/dashboard
        run: |
          if [ -f ../langgraph-backend/backend.pid ]; then kill $(cat ../langgraph-backend/backend.pid) || true; fi
          if [ -f frontend.pid ]; then kill $(cat frontend.pid) || true; fi