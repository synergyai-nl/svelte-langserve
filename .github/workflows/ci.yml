name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      root: ${{ steps.changes.outputs.root }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'examples/dashboard/**'
              - 'packages/**'
              - 'pnpm-lock.yaml'
              - 'pnpm-workspace.yaml'
            backend:
              - 'examples/langserve-backend/**'
            root:
              - 'package.json'
              - 'nx.json'
              - 'eslint.config.js'
              - '.github/workflows/**'

  frontend:
    name: Frontend (SvelteKit)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.root == 'true'
    defaults:
      run:
        working-directory: examples/dashboard
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Check types
        run: pnpm check

      - name: Lint
        run: pnpm lint

      - name: Format check
        run: pnpm exec prettier --check .

      - name: Unit tests
        run: pnpm test:unit --run

      - name: Build
        run: pnpm build

  backend:
    name: Backend (Python/FastAPI)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.root == 'true'
    defaults:
      run:
        working-directory: examples/langserve-backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "examples/langserve-backend/uv.lock"

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: uv sync --dev

      - name: Lint with ruff
        run: uv run ruff check .

      - name: Format check with ruff
        run: uv run ruff format --check .

      - name: Type check with pyright
        run: uv run pyright src/

      - name: Run tests
        run: uv run pytest

  quality:
    name: Quality Checks (Nx)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "examples/langserve-backend/uv.lock"

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Install backend dependencies
        working-directory: examples/langserve-backend
        run: uv sync --dev

      - name: Build packages
        run: npx nx run svelte-langserve:build --output-style=stream

      - name: Run quality checks (excluding e2e tests)
        run: npx nx run-many -t lint,check --output-style=stream --parallel=3

      - name: Run unit tests
        run: |
          npx nx run dashboard:test:unit --output-style=stream || true
          npx nx run svelte-langserve:test --output-style=stream || true
          npx nx run langserve-backend:test --output-style=stream || true

  e2e:
    name: End-to-End Tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [changes, frontend, backend, quality]
    if: always() && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.root == 'true')
    defaults:
      run:
        working-directory: examples/dashboard
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Install uv (for backend)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "examples/langserve-backend/uv.lock"

      - name: Set up Python
        run: uv python install

      - name: Install backend dependencies
        working-directory: examples/langserve-backend
        run: uv sync

      - name: Start backend server
        working-directory: examples/langserve-backend
        run: |
          uv run uvicorn src.svelte_langserve.main:create_app --factory --host 0.0.0.0 --port 8000 &
          echo $! > backend.pid
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'test-key' }}

      - name: Wait for backend
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done' || echo "Backend health check failed, continuing with tests"

      - name: Run Playwright tests
        run: pnpm test:e2e

      - name: Upload Playwright report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: examples/dashboard/playwright-report/
          retention-days: 30

      - name: Cleanup backend
        if: always()
        run: |
          if [ -f backend.pid ]; then kill $(cat backend.pid) || true; fi